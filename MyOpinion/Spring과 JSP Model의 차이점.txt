기존 JSP MODEL ->
 V생성 이후에 C생성 그리고 M을 생성하고 그 값을 저장해줄 필요가 있다면 클레스를 하나 생성해서 그 클레스에 값을 저장한다.
->
M에서 V가 입력한 값을 받아온다 그리고 M에서 값들을 여러가지 계산이나 입력받은 값을 토대로 DB작업을 한다. 
->
그 이후에 C에 가서 M객체를 불러와서 C에서 V로 전달한다. (이때  post방식이라면 (charSet)파라메터 한글요청이 필요하다.)
---------------------------------------------------------------------------------

Spring(Post 파라메터 한글요청은 web.xml에 추가하면 끝)
그리고 지금의 Spring은 V생성->저장해줄 클레스를 생성->DB의 필드명과
클래스의 멤버변수명이 같으면 JavaBean객체를 자동으로 생성해준다.
->
C생성 이후에 입력 받은값을  기존 JSP Model과는 다르게 V쪽 파라메터명이 클래스의 필드명과 같으면 바로 클래스쪽에 값이 전해진다.
 -> 
그런 이유로 자연스럽게 테이블의 필드명과 클래스의 멤버변수명 그리고 파라메터명이 다 같아지게 됀다.
->
 이후 C에서 확인하기위해 클래스를 불러 get으로 값이 전달돼었는지 확인하고 ->
DAO생성 이때 기존 JSP Model에서 했던 Singleton은 @Service로(Java Bean에 자동으로 등록해주는) Singleton이 적용될것 ->DAO 내에서도 값이 잘 전달돼는지 get으로 확인이후
 ->
C에가서 AutoWired(등록돼있는걸 자동으로 연결해주는 시스템)로 그 객체를 불러온다 (JSP Model때는 그 객체가 필요하면 하나하나 다 불러왔던)
->
그 이후에 DB작업을 해줘야하는데 Mapper.xml에 가서name space명은 패키지.interface명으로  
id명은 맘대로(하지만 의미가 있으면 좋을것) paramater type,result type은 패키지.클래스명
->
그 후에 interface에 가서 